package com.massky.sraum.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATE_WAY_INFO_BEAN".
*/
public class GateWayInfoBeanDao extends AbstractDao<GateWayInfoBean, Void> {

    public static final String TABLENAME = "GATE_WAY_INFO_BEAN";

    /**
     * Properties of entity GateWayInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Number = new Property(0, String.class, "number", false, "NUMBER");
        public final static Property MAC = new Property(1, String.class, "MAC", false, "MAC");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Proto = new Property(3, String.class, "proto", false, "PROTO");
        public final static Property Ip = new Property(4, String.class, "ip", false, "IP");
        public final static Property Status = new Property(5, String.class, "status", false, "STATUS");
        public final static Property TimeStamp = new Property(6, String.class, "timeStamp", false, "TIME_STAMP");
    }


    public GateWayInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GateWayInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATE_WAY_INFO_BEAN\" (" + //
                "\"NUMBER\" TEXT," + // 0: number
                "\"MAC\" TEXT," + // 1: MAC
                "\"NAME\" TEXT," + // 2: name
                "\"PROTO\" TEXT," + // 3: proto
                "\"IP\" TEXT," + // 4: ip
                "\"STATUS\" TEXT," + // 5: status
                "\"TIME_STAMP\" TEXT);"); // 6: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATE_WAY_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GateWayInfoBean entity) {
        stmt.clearBindings();
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(1, number);
        }
 
        String MAC = entity.getMAC();
        if (MAC != null) {
            stmt.bindString(2, MAC);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String proto = entity.getProto();
        if (proto != null) {
            stmt.bindString(4, proto);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(5, ip);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(7, timeStamp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GateWayInfoBean entity) {
        stmt.clearBindings();
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(1, number);
        }
 
        String MAC = entity.getMAC();
        if (MAC != null) {
            stmt.bindString(2, MAC);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String proto = entity.getProto();
        if (proto != null) {
            stmt.bindString(4, proto);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(5, ip);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(6, status);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(7, timeStamp);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public GateWayInfoBean readEntity(Cursor cursor, int offset) {
        GateWayInfoBean entity = new GateWayInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // number
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // MAC
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // proto
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ip
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GateWayInfoBean entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMAC(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStatus(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeStamp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(GateWayInfoBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(GateWayInfoBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(GateWayInfoBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
